'''

Title: Library Book Management System in Python

Objective: Develop a Python program to manage a library's book inventory. The program should define a Book class and perform various operations to display and organize information about the books.

Tasks:

Class Definition:

Define a class Book with attributes: title, author, genre, publication_year, and price.
Include an __init__ method to initialize these attributes and a display_info method to print the book's details in a formatted string.
Sorting by Attribute:

Implement a function sort_by_attribute(books, attribute) that sorts the list of Book objects based on a specified attribute (e.g., price, publication year). The function should allow sorting in both ascending and descending order.
Listing Books by Genre:

Create a function list_by_genre(books, genre) that lists all books of a specific genre. If no books of that genre are found, print an appropriate message.
Searching by Author:

Implement a function search_by_author(books, author_name) that finds all books by a specific author. If no books by that author are found, display a message indicating this.
Finding the Most Expensive Book:

Write a function most_expensive_book(books) that identifies and displays the most expensive book in the inventory.
Filtering Recent Publications:

Create a function recent_publications(books, year) that lists all books published after a certain year.
Test Cases:

Create several instances of the Book class with various attributes.
Demonstrate each of the functions using these instances, showing their functionality.
Output:

Print the results of each function, including sorted lists, filtered books by genre or author, the most expensive book, and recent publications.
Constraints:

Ensure that data for each book is entered correctly and handled appropriately in each function.
Implement error handling for cases such as empty lists or invalid inputs.
'''

'''
Define a class Book with attributes: title, author, genre, publication_year, and price.
Include an __init__ method to initialize these attributes and a display_info method to print the book's details in a formatted string.

'''


'''
Sorting by Price:
Implement a function sort_by_price() that sorts the list of Book objects based on price.
The function should allow sorting in both ascending and descending order.
'''

'''
Listing Books by Genre:

Create a function list_by_genre(books, genre) that lists all books of a specific genre. If no books of that genre are found, print an appropriate message.

'''

'''
Searching by Author:

Implement a function search_by_author(books, author_name) that finds all books by a specific author. If no books by that author are found, display a message indicating this.
'''

'''
Finding the Most Expensive Book:

Write a function most_expensive_book(books) that identifies and displays the most expensive book in the inventory.
'''

'''
Filtering Recent Publications:

Create a function recent_publications(books, year) that lists all books published after a certain year.
Test Cases:
'''

'''
Create several instances of the Book class with various attributes.
Demonstrate each of the functions using these instances, showing their functionality.
'''

'''
Output:
Print the results of each function, including sorted lists, filtered books by genre or author, the most expensive book, and recent publications.
'''